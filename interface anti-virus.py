import customtkinter 
import tkinter as tk
from tkinter import ttk
from ttkthemes import ThemedTk
from tkinter import messagebox
import json
import os
from tkinter import filedialog
import requests
import hashlib
import getpass
from virustotal_python import Virustotal
import os.path
from pprint import pprint
import time
import hashlib
import ctypes
import sys

def show_frame(frame):
    frame.tkraise()

customtkinter.set_appearance_mode("dark")
customtkinter.set_default_color_theme("dark-blue")

root = customtkinter.CTk()


def check_password(password):
    sha1_password = hashlib.sha1(password.encode('utf-8')).hexdigest().upper()
    prefix, suffix = sha1_password[:5], sha1_password[5:]
    url = f'https://api.pwnedpasswords.com/range/{prefix}'
    response = requests.get(url)

    if suffix in response.text:
        return f"The password has been compromised. Change it immediately."
    else:
        return f"The password has not been compromised. You can use it securely."

def password_been():
    password_to_check = entry1.get()
    result = check_password(password_to_check)
    print(result)

def scan_file():
    API_KEY = "a6d06aebbad67f0022ea7420a2da432586d1227f804f344f9beaa81efc61fc4d"

    root = tk.Tk()
    root.withdraw()


    FILE_PATH = filedialog.askopenfilename()

    files = {"file": (os.path.basename(FILE_PATH), open(os.path.abspath(FILE_PATH), "rb"))}

    vtotal = Virustotal(API_KEY=API_KEY, API_VERSION=2)
    resp = vtotal.request("file/scan", files=files, method="POST")



    if resp.response_code == 1:
        resource = resp.json()['resource']
        print(f"Scan request successfully queued. Checking report for resource: {resource}")

        while True:
            report_resp = vtotal.request(f"file/report", params={"resource": resource})
            if report_resp.response_code == 1:
                break
            elif report_resp.response_code == 0:
                print("Scan not finished yet. Waiting...")
                time.sleep(10)
            else:
                print(f"Error checking report: {report_resp.json()}")
                break

        report_data = report_resp.json()


        if 'permalink' in report_data:
            print(f"Permalink: {report_data['permalink']}")
        else:
            print("No permalink available.")


        print(f"Scan Report for File: {os.path.basename(FILE_PATH)}")
        print(f"Resource: {report_data['resource']}")
        print(f"Permalink: {report_data['permalink']}")
        print(f"MD5: {report_data['md5']}")
        print(f"SHA1: {report_data['sha1']}")
        print(f"SHA256: {report_data['sha256']}")
        print(f"Scan Date: {report_data['scan_date']}")

        if 'scans' in report_data:
            num_antiviruses = len(report_data['scans'])
            detected_antiviruses = [antivirus for antivirus, result in report_data['scans'].items() if result['detected']]
            num_detections = len(detected_antiviruses)

            print(f"\n{num_detections}/{num_antiviruses} Antiviruses Detected the File as malicious:")
            if num_detections > 0:
                for antivirus in detected_antiviruses:
                    result = report_data['scans'][antivirus]['result']
                    print(f"  {antivirus}: {result}")
        else:
            print("No scan results available.")
    else:
        print(f"Error submitting the file for scanning: {resp.json()}")

def scan_disk():
    def calculate_sha256(file_path):
        sha256 = hashlib.sha256()
        try:
            with open(file_path, 'rb') as file:
                while chunk := file.read(8192):
                    sha256.update(chunk)
        except PermissionError:
            print(f"PermissionError: Permission denied for file: {file_path}")
        except Exception as e:
            print(f"Error processing file {file_path}: {str(e)}")
        return sha256.hexdigest()

    def compare_hashes(result_file_path, hash_list_file, directory):
        with open(hash_list_file, 'r') as hash_file:
            hash_list = [line.strip() for line in hash_file]

        with open(result_file_path, 'w') as result_file:
            for root, dirs, files in os.walk(directory):
                for file in files:
                    file_path = os.path.join(root, file)
                    if os.path.isfile(file_path):
                        file_hash = calculate_sha256(file_path)
                        if file_hash in hash_list:
                            result_file.write(f"Match: {file_path}\n")

    if __name__ == "__main__":
        hash_list_file = 'full_sha256.txt'
        result_file_path = 'matches.txt'

        root = tk.Tk()
        root.withdraw()

        directory = filedialog.askdirectory()

        compare_hashes(result_file_path, hash_list_file, directory)

        print(f"Analysis completed. Results are saved in '{result_file_path}'.")



entry1 = customtkinter.CTkEntry(master=root, placeholder_text="Password", show="*")
entry1.pack(pady=10, padx=10, side=tk.BOTTOM)



utility_frame = customtkinter.CTkFrame(master=root)
utility_frame.pack(pady=0, padx=0)


button1 = customtkinter.CTkButton(master=utility_frame, text="test password", command=password_been)
button1.pack(pady=10, padx=100, side=tk.BOTTOM)

button2 = customtkinter.CTkButton(master=utility_frame, text="scan disk", command=scan_disk)
button2.pack(pady=50, padx=100, side=tk.BOTTOM)

button3 = customtkinter.CTkButton(master=utility_frame, text="scan fichier", command=scan_file)
button3.pack(pady=10, padx=100, side=tk.BOTTOM)



root.mainloop()